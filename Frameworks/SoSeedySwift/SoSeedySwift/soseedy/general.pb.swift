//
// Copyright (C) 2016-present Instructure, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: general.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Soseedy_HealthCheckRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_SeedDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var teachers: Int32 = 0

  public var students: Int32 = 0

  public var courses: Int32 = 0

  public var favoriteCourses: Int32 = 0

  public var announcements: Int32 = 0

  public var discussions: Int32 = 0

  public var gradingPeriods: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_HealthCheck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var healthy: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_SeededData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var teachers: [Soseedy_CanvasUser] = []

  public var enrollments: [Soseedy_Enrollment] = []

  public var students: [Soseedy_CanvasUser] = []

  public var courses: [Soseedy_Course] = []

  public var favorites: [Soseedy_Favorite] = []

  public var discussions: [Soseedy_Discussion] = []

  public var announcements: [Soseedy_Discussion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soseedy"

extension Soseedy_HealthCheckRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HealthCheckRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_HealthCheckRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_SeedDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SeedDataRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "teachers"),
    2: .same(proto: "students"),
    3: .same(proto: "courses"),
    4: .same(proto: "favoriteCourses"),
    5: .same(proto: "announcements"),
    6: .same(proto: "discussions"),
    7: .same(proto: "gradingPeriods"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.teachers)
      case 2: try decoder.decodeSingularInt32Field(value: &self.students)
      case 3: try decoder.decodeSingularInt32Field(value: &self.courses)
      case 4: try decoder.decodeSingularInt32Field(value: &self.favoriteCourses)
      case 5: try decoder.decodeSingularInt32Field(value: &self.announcements)
      case 6: try decoder.decodeSingularInt32Field(value: &self.discussions)
      case 7: try decoder.decodeSingularBoolField(value: &self.gradingPeriods)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.teachers != 0 {
      try visitor.visitSingularInt32Field(value: self.teachers, fieldNumber: 1)
    }
    if self.students != 0 {
      try visitor.visitSingularInt32Field(value: self.students, fieldNumber: 2)
    }
    if self.courses != 0 {
      try visitor.visitSingularInt32Field(value: self.courses, fieldNumber: 3)
    }
    if self.favoriteCourses != 0 {
      try visitor.visitSingularInt32Field(value: self.favoriteCourses, fieldNumber: 4)
    }
    if self.announcements != 0 {
      try visitor.visitSingularInt32Field(value: self.announcements, fieldNumber: 5)
    }
    if self.discussions != 0 {
      try visitor.visitSingularInt32Field(value: self.discussions, fieldNumber: 6)
    }
    if self.gradingPeriods != false {
      try visitor.visitSingularBoolField(value: self.gradingPeriods, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_SeedDataRequest) -> Bool {
    if self.teachers != other.teachers {return false}
    if self.students != other.students {return false}
    if self.courses != other.courses {return false}
    if self.favoriteCourses != other.favoriteCourses {return false}
    if self.announcements != other.announcements {return false}
    if self.discussions != other.discussions {return false}
    if self.gradingPeriods != other.gradingPeriods {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_HealthCheck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HealthCheck"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "healthy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.healthy)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.healthy != false {
      try visitor.visitSingularBoolField(value: self.healthy, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_HealthCheck) -> Bool {
    if self.healthy != other.healthy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_SeededData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SeededData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "teachers"),
    2: .same(proto: "enrollments"),
    3: .same(proto: "students"),
    4: .same(proto: "courses"),
    5: .same(proto: "favorites"),
    6: .same(proto: "discussions"),
    7: .same(proto: "announcements"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.teachers)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.enrollments)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.students)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.courses)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.favorites)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.discussions)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.announcements)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.teachers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.teachers, fieldNumber: 1)
    }
    if !self.enrollments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.enrollments, fieldNumber: 2)
    }
    if !self.students.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.students, fieldNumber: 3)
    }
    if !self.courses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.courses, fieldNumber: 4)
    }
    if !self.favorites.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.favorites, fieldNumber: 5)
    }
    if !self.discussions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.discussions, fieldNumber: 6)
    }
    if !self.announcements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.announcements, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_SeededData) -> Bool {
    if self.teachers != other.teachers {return false}
    if self.enrollments != other.enrollments {return false}
    if self.students != other.students {return false}
    if self.courses != other.courses {return false}
    if self.favorites != other.favorites {return false}
    if self.discussions != other.discussions {return false}
    if self.announcements != other.announcements {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
