//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: courses.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

public protocol Soseedy_SeedyCoursesCreateCourseCall: ClientCallUnary {}

fileprivate final class Soseedy_SeedyCoursesCreateCourseCallBase: ClientCallUnaryBase<Soseedy_CreateCourseRequest, Soseedy_Course>, Soseedy_SeedyCoursesCreateCourseCall {
  override class var method: String { return "/soseedy.SeedyCourses/CreateCourse" }
}

public protocol Soseedy_SeedyCoursesAddFavoriteCourseCall: ClientCallUnary {}

fileprivate final class Soseedy_SeedyCoursesAddFavoriteCourseCallBase: ClientCallUnaryBase<Soseedy_AddFavoriteCourseRequest, Soseedy_Favorite>, Soseedy_SeedyCoursesAddFavoriteCourseCall {
  override class var method: String { return "/soseedy.SeedyCourses/AddFavoriteCourse" }
}


/// Instantiate Soseedy_SeedyCoursesServiceClient, then call methods of this protocol to make API calls.
public protocol Soseedy_SeedyCoursesService: ServiceClient {
  /// Synchronous. Unary.
  func createCourse(_ request: Soseedy_CreateCourseRequest) throws -> Soseedy_Course
  /// Asynchronous. Unary.
  func createCourse(_ request: Soseedy_CreateCourseRequest, completion: @escaping (Soseedy_Course?, CallResult) -> Void) throws -> Soseedy_SeedyCoursesCreateCourseCall

  /// Synchronous. Unary.
  func addFavoriteCourse(_ request: Soseedy_AddFavoriteCourseRequest) throws -> Soseedy_Favorite
  /// Asynchronous. Unary.
  func addFavoriteCourse(_ request: Soseedy_AddFavoriteCourseRequest, completion: @escaping (Soseedy_Favorite?, CallResult) -> Void) throws -> Soseedy_SeedyCoursesAddFavoriteCourseCall

}

public final class Soseedy_SeedyCoursesServiceClient: ServiceClientBase, Soseedy_SeedyCoursesService {
  /// Synchronous. Unary.
  public func createCourse(_ request: Soseedy_CreateCourseRequest) throws -> Soseedy_Course {
    return try Soseedy_SeedyCoursesCreateCourseCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func createCourse(_ request: Soseedy_CreateCourseRequest, completion: @escaping (Soseedy_Course?, CallResult) -> Void) throws -> Soseedy_SeedyCoursesCreateCourseCall {
    return try Soseedy_SeedyCoursesCreateCourseCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func addFavoriteCourse(_ request: Soseedy_AddFavoriteCourseRequest) throws -> Soseedy_Favorite {
    return try Soseedy_SeedyCoursesAddFavoriteCourseCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func addFavoriteCourse(_ request: Soseedy_AddFavoriteCourseRequest, completion: @escaping (Soseedy_Favorite?, CallResult) -> Void) throws -> Soseedy_SeedyCoursesAddFavoriteCourseCall {
    return try Soseedy_SeedyCoursesAddFavoriteCourseCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Soseedy_SeedyCoursesProvider {
  func createCourse(request: Soseedy_CreateCourseRequest, session: Soseedy_SeedyCoursesCreateCourseSession) throws -> Soseedy_Course
  func addFavoriteCourse(request: Soseedy_AddFavoriteCourseRequest, session: Soseedy_SeedyCoursesAddFavoriteCourseSession) throws -> Soseedy_Favorite
}

public protocol Soseedy_SeedyCoursesCreateCourseSession: ServerSessionUnary {}

fileprivate final class Soseedy_SeedyCoursesCreateCourseSessionBase: ServerSessionUnaryBase<Soseedy_CreateCourseRequest, Soseedy_Course>, Soseedy_SeedyCoursesCreateCourseSession {}

public protocol Soseedy_SeedyCoursesAddFavoriteCourseSession: ServerSessionUnary {}

fileprivate final class Soseedy_SeedyCoursesAddFavoriteCourseSessionBase: ServerSessionUnaryBase<Soseedy_AddFavoriteCourseRequest, Soseedy_Favorite>, Soseedy_SeedyCoursesAddFavoriteCourseSession {}


/// Main server for generated service
public final class Soseedy_SeedyCoursesServer: ServiceServer {
  private let provider: Soseedy_SeedyCoursesProvider

  public init(address: String, provider: Soseedy_SeedyCoursesProvider) {
    self.provider = provider
    super.init(address: address)
  }

  public init?(address: String, certificateURL: URL, keyURL: URL, provider: Soseedy_SeedyCoursesProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  public init?(address: String, certificateString: String, keyString: String, provider: Soseedy_SeedyCoursesProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  public override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/soseedy.SeedyCourses/CreateCourse":
      try Soseedy_SeedyCoursesCreateCourseSessionBase(
        handler: handler,
        providerBlock: { try provider.createCourse(request: $0, session: $1 as! Soseedy_SeedyCoursesCreateCourseSessionBase) })
          .run(queue: queue)
      return true
    case "/soseedy.SeedyCourses/AddFavoriteCourse":
      try Soseedy_SeedyCoursesAddFavoriteCourseSessionBase(
        handler: handler,
        providerBlock: { try provider.addFavoriteCourse(request: $0, session: $1 as! Soseedy_SeedyCoursesAddFavoriteCourseSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

