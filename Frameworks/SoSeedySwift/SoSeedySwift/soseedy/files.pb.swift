//
// Copyright (C) 2016-present Instructure, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: files.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Soseedy_FileUploadType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case assignmentSubmission // = 0
  case commentAttachment // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .assignmentSubmission
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .assignmentSubmission
    case 1: self = .commentAttachment
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .assignmentSubmission: return 0
    case .commentAttachment: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Soseedy_UploadFileRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var courseID: Int64 = 0

  public var assignmentID: Int64 = 0

  public var token: String = String()

  public var fileName: String = String()

  public var file: Data = SwiftProtobuf.Internal.emptyData

  public var uploadType: Soseedy_FileUploadType = .assignmentSubmission

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Response messages
public struct Soseedy_FileUploadParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var uploadURL: String = String()

  public var uploadParams: Dictionary<String,String> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_Attachment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var displayName: String = String()

  public var fileName: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soseedy"

extension Soseedy_FileUploadType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ASSIGNMENT_SUBMISSION"),
    1: .same(proto: "COMMENT_ATTACHMENT"),
  ]
}

extension Soseedy_UploadFileRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UploadFileRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "assignmentId"),
    3: .same(proto: "token"),
    4: .same(proto: "fileName"),
    5: .same(proto: "file"),
    6: .same(proto: "uploadType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.assignmentID)
      case 3: try decoder.decodeSingularStringField(value: &self.token)
      case 4: try decoder.decodeSingularStringField(value: &self.fileName)
      case 5: try decoder.decodeSingularBytesField(value: &self.file)
      case 6: try decoder.decodeSingularEnumField(value: &self.uploadType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.assignmentID != 0 {
      try visitor.visitSingularInt64Field(value: self.assignmentID, fieldNumber: 2)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 3)
    }
    if !self.fileName.isEmpty {
      try visitor.visitSingularStringField(value: self.fileName, fieldNumber: 4)
    }
    if !self.file.isEmpty {
      try visitor.visitSingularBytesField(value: self.file, fieldNumber: 5)
    }
    if self.uploadType != .assignmentSubmission {
      try visitor.visitSingularEnumField(value: self.uploadType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_UploadFileRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.assignmentID != other.assignmentID {return false}
    if self.token != other.token {return false}
    if self.fileName != other.fileName {return false}
    if self.file != other.file {return false}
    if self.uploadType != other.uploadType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_FileUploadParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FileUploadParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uploadUrl"),
    2: .same(proto: "uploadParams"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uploadURL)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.uploadParams)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uploadURL.isEmpty {
      try visitor.visitSingularStringField(value: self.uploadURL, fieldNumber: 1)
    }
    if !self.uploadParams.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.uploadParams, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_FileUploadParams) -> Bool {
    if self.uploadURL != other.uploadURL {return false}
    if self.uploadParams != other.uploadParams {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_Attachment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Attachment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "displayName"),
    3: .same(proto: "fileName"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.displayName)
      case 3: try decoder.decodeSingularStringField(value: &self.fileName)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.displayName.isEmpty {
      try visitor.visitSingularStringField(value: self.displayName, fieldNumber: 2)
    }
    if !self.fileName.isEmpty {
      try visitor.visitSingularStringField(value: self.fileName, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_Attachment) -> Bool {
    if self.id != other.id {return false}
    if self.displayName != other.displayName {return false}
    if self.fileName != other.fileName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
