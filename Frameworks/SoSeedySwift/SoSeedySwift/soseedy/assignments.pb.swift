//
// Copyright (C) 2016-present Instructure, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: assignments.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Soseedy_FileType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case text // = 0
  case pdf // = 1
  case none // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .text
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .text
    case 1: self = .pdf
    case 3: self = .none
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .text: return 0
    case .pdf: return 1
    case .none: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Soseedy_SubmissionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case noType // = 0
  case onPaper // = 1
  case onlineQuiz // = 2
  case onlineUpload // = 3
  case onlineTextEntry // = 4
  case onlineURL // = 5
  case externalTool // = 6
  case discussionTopic // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .noType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noType
    case 1: self = .onPaper
    case 2: self = .onlineQuiz
    case 3: self = .onlineUpload
    case 4: self = .onlineTextEntry
    case 5: self = .onlineURL
    case 6: self = .externalTool
    case 7: self = .discussionTopic
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noType: return 0
    case .onPaper: return 1
    case .onlineQuiz: return 2
    case .onlineUpload: return 3
    case .onlineTextEntry: return 4
    case .onlineURL: return 5
    case .externalTool: return 6
    case .discussionTopic: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Soseedy_CreateAssignmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var courseID: Int64 = 0

  public var withDescription: Bool = false

  public var lockAt: String = String()

  public var unlockAt: String = String()

  public var dueAt: String = String()

  public var submissionTypes: [Soseedy_SubmissionType] = []

  public var teacherToken: String = String()

  public var groupCategoryID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_CreateAssignmentOverrideRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var courseID: Int64 = 0

  public var assignmentID: Int64 = 0

  public var token: String = String()

  public var studentIds: [Int64] = []

  public var groupID: Int64 = 0

  public var courseSectionID: Int64 = 0

  public var dueAt: String = String()

  public var unlockAt: String = String()

  public var lockAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_SubmitCourseAssignmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var submissionType: Soseedy_SubmissionType = .noType

  public var courseID: Int64 = 0

  public var assignmentID: Int64 = 0

  public var studentToken: String = String()

  public var body: String = String()

  public var url: String = String()

  public var fileIds: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_CreateCourseAssignmentCommentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var courseID: Int64 = 0

  public var assignmentID: Int64 = 0

  public var studentToken: String = String()

  public var fileIds: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_SeedAssignmentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var courseID: Int64 = 0

  public var assignments: Int32 = 0

  public var withDescription: Bool = false

  public var lockAt: String = String()

  public var unlockAt: String = String()

  public var dueAt: String = String()

  public var submissionTypes: [Soseedy_SubmissionType] = []

  public var teacherToken: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_SeedAssignmentSubmissionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var assignmentID: Int64 = 0

  public var courseID: Int64 = 0

  public var studentToken: String = String()

  public var submissionSeeds: [Soseedy_SubmissionSeed] = []

  public var commentSeeds: [Soseedy_CommentSeed] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_SubmissionSeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var submissionType: Soseedy_SubmissionType = .noType

  public var amount: Int32 = 0

  public var fileType: Soseedy_FileType = .text

  public var attachments: [Soseedy_Attachment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_CommentSeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var amount: Int32 = 0

  public var fileType: Soseedy_FileType = .text

  public var attachments: [Soseedy_Attachment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_Assignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var name: String = String()

  public var published: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_Assignments {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var assignments: [Soseedy_Assignment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_SeededCourseAssignmentSubmissions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var submissions: [Soseedy_CourseAssignmentSubmission] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_AssignmentOverride {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var assignmentID: Int64 = 0

  public var title: String = String()

  public var studentIds: [Int64] = []

  public var groupID: Int64 = 0

  public var courseSectionID: Int64 = 0

  public var dueAt: String = String()

  public var unlockAt: String = String()

  public var lockAt: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_CourseAssignmentSubmission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var body: String = String()

  public var url: String = String()

  public var submissionComments: [Soseedy_Comment] = []

  public var attachments: [Soseedy_Attachment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Soseedy_Comment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var authorName: String = String()

  public var comment: String = String()

  public var attachments: [Soseedy_Attachment] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "soseedy"

extension Soseedy_FileType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEXT"),
    1: .same(proto: "PDF"),
    3: .same(proto: "NONE"),
  ]
}

extension Soseedy_SubmissionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_TYPE"),
    1: .same(proto: "ON_PAPER"),
    2: .same(proto: "ONLINE_QUIZ"),
    3: .same(proto: "ONLINE_UPLOAD"),
    4: .same(proto: "ONLINE_TEXT_ENTRY"),
    5: .same(proto: "ONLINE_URL"),
    6: .same(proto: "EXTERNAL_TOOL"),
    7: .same(proto: "DISCUSSION_TOPIC"),
  ]
}

extension Soseedy_CreateAssignmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAssignmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "withDescription"),
    3: .same(proto: "lockAt"),
    4: .same(proto: "unlockAt"),
    5: .same(proto: "dueAt"),
    6: .same(proto: "submissionTypes"),
    7: .same(proto: "teacherToken"),
    8: .same(proto: "groupCategoryId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularBoolField(value: &self.withDescription)
      case 3: try decoder.decodeSingularStringField(value: &self.lockAt)
      case 4: try decoder.decodeSingularStringField(value: &self.unlockAt)
      case 5: try decoder.decodeSingularStringField(value: &self.dueAt)
      case 6: try decoder.decodeRepeatedEnumField(value: &self.submissionTypes)
      case 7: try decoder.decodeSingularStringField(value: &self.teacherToken)
      case 8: try decoder.decodeSingularInt64Field(value: &self.groupCategoryID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.withDescription != false {
      try visitor.visitSingularBoolField(value: self.withDescription, fieldNumber: 2)
    }
    if !self.lockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.lockAt, fieldNumber: 3)
    }
    if !self.unlockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.unlockAt, fieldNumber: 4)
    }
    if !self.dueAt.isEmpty {
      try visitor.visitSingularStringField(value: self.dueAt, fieldNumber: 5)
    }
    if !self.submissionTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.submissionTypes, fieldNumber: 6)
    }
    if !self.teacherToken.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherToken, fieldNumber: 7)
    }
    if self.groupCategoryID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupCategoryID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_CreateAssignmentRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.withDescription != other.withDescription {return false}
    if self.lockAt != other.lockAt {return false}
    if self.unlockAt != other.unlockAt {return false}
    if self.dueAt != other.dueAt {return false}
    if self.submissionTypes != other.submissionTypes {return false}
    if self.teacherToken != other.teacherToken {return false}
    if self.groupCategoryID != other.groupCategoryID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CreateAssignmentOverrideRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateAssignmentOverrideRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "assignmentId"),
    3: .same(proto: "token"),
    4: .same(proto: "studentIds"),
    5: .same(proto: "groupId"),
    6: .same(proto: "courseSectionId"),
    7: .same(proto: "dueAt"),
    8: .same(proto: "unlockAt"),
    9: .same(proto: "lockAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.assignmentID)
      case 3: try decoder.decodeSingularStringField(value: &self.token)
      case 4: try decoder.decodeRepeatedInt64Field(value: &self.studentIds)
      case 5: try decoder.decodeSingularInt64Field(value: &self.groupID)
      case 6: try decoder.decodeSingularInt64Field(value: &self.courseSectionID)
      case 7: try decoder.decodeSingularStringField(value: &self.dueAt)
      case 8: try decoder.decodeSingularStringField(value: &self.unlockAt)
      case 9: try decoder.decodeSingularStringField(value: &self.lockAt)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.assignmentID != 0 {
      try visitor.visitSingularInt64Field(value: self.assignmentID, fieldNumber: 2)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 3)
    }
    if !self.studentIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.studentIds, fieldNumber: 4)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 5)
    }
    if self.courseSectionID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseSectionID, fieldNumber: 6)
    }
    if !self.dueAt.isEmpty {
      try visitor.visitSingularStringField(value: self.dueAt, fieldNumber: 7)
    }
    if !self.unlockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.unlockAt, fieldNumber: 8)
    }
    if !self.lockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.lockAt, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_CreateAssignmentOverrideRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.assignmentID != other.assignmentID {return false}
    if self.token != other.token {return false}
    if self.studentIds != other.studentIds {return false}
    if self.groupID != other.groupID {return false}
    if self.courseSectionID != other.courseSectionID {return false}
    if self.dueAt != other.dueAt {return false}
    if self.unlockAt != other.unlockAt {return false}
    if self.lockAt != other.lockAt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_SubmitCourseAssignmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitCourseAssignmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "submissionType"),
    2: .same(proto: "courseId"),
    3: .same(proto: "assignmentId"),
    4: .same(proto: "studentToken"),
    5: .same(proto: "body"),
    6: .same(proto: "url"),
    7: .same(proto: "fileIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.submissionType)
      case 2: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 3: try decoder.decodeSingularInt64Field(value: &self.assignmentID)
      case 4: try decoder.decodeSingularStringField(value: &self.studentToken)
      case 5: try decoder.decodeSingularStringField(value: &self.body)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeRepeatedInt64Field(value: &self.fileIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.submissionType != .noType {
      try visitor.visitSingularEnumField(value: self.submissionType, fieldNumber: 1)
    }
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 2)
    }
    if self.assignmentID != 0 {
      try visitor.visitSingularInt64Field(value: self.assignmentID, fieldNumber: 3)
    }
    if !self.studentToken.isEmpty {
      try visitor.visitSingularStringField(value: self.studentToken, fieldNumber: 4)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if !self.fileIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.fileIds, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_SubmitCourseAssignmentRequest) -> Bool {
    if self.submissionType != other.submissionType {return false}
    if self.courseID != other.courseID {return false}
    if self.assignmentID != other.assignmentID {return false}
    if self.studentToken != other.studentToken {return false}
    if self.body != other.body {return false}
    if self.url != other.url {return false}
    if self.fileIds != other.fileIds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CreateCourseAssignmentCommentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateCourseAssignmentCommentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "assignmentId"),
    3: .same(proto: "studentToken"),
    4: .same(proto: "fileIds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.assignmentID)
      case 3: try decoder.decodeSingularStringField(value: &self.studentToken)
      case 4: try decoder.decodeRepeatedInt64Field(value: &self.fileIds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.assignmentID != 0 {
      try visitor.visitSingularInt64Field(value: self.assignmentID, fieldNumber: 2)
    }
    if !self.studentToken.isEmpty {
      try visitor.visitSingularStringField(value: self.studentToken, fieldNumber: 3)
    }
    if !self.fileIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.fileIds, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_CreateCourseAssignmentCommentRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.assignmentID != other.assignmentID {return false}
    if self.studentToken != other.studentToken {return false}
    if self.fileIds != other.fileIds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_SeedAssignmentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SeedAssignmentRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "courseId"),
    2: .same(proto: "assignments"),
    3: .same(proto: "withDescription"),
    4: .same(proto: "lockAt"),
    5: .same(proto: "unlockAt"),
    6: .same(proto: "dueAt"),
    7: .same(proto: "submissionTypes"),
    8: .same(proto: "teacherToken"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 2: try decoder.decodeSingularInt32Field(value: &self.assignments)
      case 3: try decoder.decodeSingularBoolField(value: &self.withDescription)
      case 4: try decoder.decodeSingularStringField(value: &self.lockAt)
      case 5: try decoder.decodeSingularStringField(value: &self.unlockAt)
      case 6: try decoder.decodeSingularStringField(value: &self.dueAt)
      case 7: try decoder.decodeRepeatedEnumField(value: &self.submissionTypes)
      case 8: try decoder.decodeSingularStringField(value: &self.teacherToken)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 1)
    }
    if self.assignments != 0 {
      try visitor.visitSingularInt32Field(value: self.assignments, fieldNumber: 2)
    }
    if self.withDescription != false {
      try visitor.visitSingularBoolField(value: self.withDescription, fieldNumber: 3)
    }
    if !self.lockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.lockAt, fieldNumber: 4)
    }
    if !self.unlockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.unlockAt, fieldNumber: 5)
    }
    if !self.dueAt.isEmpty {
      try visitor.visitSingularStringField(value: self.dueAt, fieldNumber: 6)
    }
    if !self.submissionTypes.isEmpty {
      try visitor.visitPackedEnumField(value: self.submissionTypes, fieldNumber: 7)
    }
    if !self.teacherToken.isEmpty {
      try visitor.visitSingularStringField(value: self.teacherToken, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_SeedAssignmentRequest) -> Bool {
    if self.courseID != other.courseID {return false}
    if self.assignments != other.assignments {return false}
    if self.withDescription != other.withDescription {return false}
    if self.lockAt != other.lockAt {return false}
    if self.unlockAt != other.unlockAt {return false}
    if self.dueAt != other.dueAt {return false}
    if self.submissionTypes != other.submissionTypes {return false}
    if self.teacherToken != other.teacherToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_SeedAssignmentSubmissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SeedAssignmentSubmissionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "assignmentId"),
    2: .same(proto: "courseId"),
    3: .same(proto: "studentToken"),
    4: .same(proto: "submissionSeeds"),
    5: .same(proto: "commentSeeds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.assignmentID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.courseID)
      case 3: try decoder.decodeSingularStringField(value: &self.studentToken)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.submissionSeeds)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.commentSeeds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.assignmentID != 0 {
      try visitor.visitSingularInt64Field(value: self.assignmentID, fieldNumber: 1)
    }
    if self.courseID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseID, fieldNumber: 2)
    }
    if !self.studentToken.isEmpty {
      try visitor.visitSingularStringField(value: self.studentToken, fieldNumber: 3)
    }
    if !self.submissionSeeds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.submissionSeeds, fieldNumber: 4)
    }
    if !self.commentSeeds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.commentSeeds, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_SeedAssignmentSubmissionRequest) -> Bool {
    if self.assignmentID != other.assignmentID {return false}
    if self.courseID != other.courseID {return false}
    if self.studentToken != other.studentToken {return false}
    if self.submissionSeeds != other.submissionSeeds {return false}
    if self.commentSeeds != other.commentSeeds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_SubmissionSeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmissionSeed"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "submissionType"),
    2: .same(proto: "amount"),
    3: .same(proto: "fileType"),
    4: .same(proto: "attachments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.submissionType)
      case 2: try decoder.decodeSingularInt32Field(value: &self.amount)
      case 3: try decoder.decodeSingularEnumField(value: &self.fileType)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.attachments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.submissionType != .noType {
      try visitor.visitSingularEnumField(value: self.submissionType, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt32Field(value: self.amount, fieldNumber: 2)
    }
    if self.fileType != .text {
      try visitor.visitSingularEnumField(value: self.fileType, fieldNumber: 3)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_SubmissionSeed) -> Bool {
    if self.submissionType != other.submissionType {return false}
    if self.amount != other.amount {return false}
    if self.fileType != other.fileType {return false}
    if self.attachments != other.attachments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CommentSeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommentSeed"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .same(proto: "fileType"),
    3: .same(proto: "attachments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.amount)
      case 2: try decoder.decodeSingularEnumField(value: &self.fileType)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.attachments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.amount != 0 {
      try visitor.visitSingularInt32Field(value: self.amount, fieldNumber: 1)
    }
    if self.fileType != .text {
      try visitor.visitSingularEnumField(value: self.fileType, fieldNumber: 2)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_CommentSeed) -> Bool {
    if self.amount != other.amount {return false}
    if self.fileType != other.fileType {return false}
    if self.attachments != other.attachments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_Assignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Assignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "published"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularBoolField(value: &self.published)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.published != false {
      try visitor.visitSingularBoolField(value: self.published, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_Assignment) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.published != other.published {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_Assignments: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Assignments"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "assignments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.assignments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assignments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assignments, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_Assignments) -> Bool {
    if self.assignments != other.assignments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_SeededCourseAssignmentSubmissions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SeededCourseAssignmentSubmissions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "submissions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.submissions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.submissions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.submissions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_SeededCourseAssignmentSubmissions) -> Bool {
    if self.submissions != other.submissions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_AssignmentOverride: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AssignmentOverride"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "assignmentId"),
    3: .same(proto: "title"),
    4: .same(proto: "studentIds"),
    5: .same(proto: "groupId"),
    6: .same(proto: "courseSectionId"),
    7: .same(proto: "dueAt"),
    8: .same(proto: "unlockAt"),
    9: .same(proto: "lockAt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.assignmentID)
      case 3: try decoder.decodeSingularStringField(value: &self.title)
      case 4: try decoder.decodeRepeatedInt64Field(value: &self.studentIds)
      case 5: try decoder.decodeSingularInt64Field(value: &self.groupID)
      case 6: try decoder.decodeSingularInt64Field(value: &self.courseSectionID)
      case 7: try decoder.decodeSingularStringField(value: &self.dueAt)
      case 8: try decoder.decodeSingularStringField(value: &self.unlockAt)
      case 9: try decoder.decodeSingularStringField(value: &self.lockAt)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.assignmentID != 0 {
      try visitor.visitSingularInt64Field(value: self.assignmentID, fieldNumber: 2)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 3)
    }
    if !self.studentIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.studentIds, fieldNumber: 4)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt64Field(value: self.groupID, fieldNumber: 5)
    }
    if self.courseSectionID != 0 {
      try visitor.visitSingularInt64Field(value: self.courseSectionID, fieldNumber: 6)
    }
    if !self.dueAt.isEmpty {
      try visitor.visitSingularStringField(value: self.dueAt, fieldNumber: 7)
    }
    if !self.unlockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.unlockAt, fieldNumber: 8)
    }
    if !self.lockAt.isEmpty {
      try visitor.visitSingularStringField(value: self.lockAt, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_AssignmentOverride) -> Bool {
    if self.id != other.id {return false}
    if self.assignmentID != other.assignmentID {return false}
    if self.title != other.title {return false}
    if self.studentIds != other.studentIds {return false}
    if self.groupID != other.groupID {return false}
    if self.courseSectionID != other.courseSectionID {return false}
    if self.dueAt != other.dueAt {return false}
    if self.unlockAt != other.unlockAt {return false}
    if self.lockAt != other.lockAt {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_CourseAssignmentSubmission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CourseAssignmentSubmission"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "body"),
    3: .same(proto: "url"),
    4: .same(proto: "submissionComments"),
    5: .same(proto: "attachments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.body)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.submissionComments)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.attachments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.body.isEmpty {
      try visitor.visitSingularStringField(value: self.body, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    if !self.submissionComments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.submissionComments, fieldNumber: 4)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_CourseAssignmentSubmission) -> Bool {
    if self.id != other.id {return false}
    if self.body != other.body {return false}
    if self.url != other.url {return false}
    if self.submissionComments != other.submissionComments {return false}
    if self.attachments != other.attachments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Soseedy_Comment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Comment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "authorName"),
    2: .same(proto: "comment"),
    3: .same(proto: "attachments"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.authorName)
      case 2: try decoder.decodeSingularStringField(value: &self.comment)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.attachments)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.authorName.isEmpty {
      try visitor.visitSingularStringField(value: self.authorName, fieldNumber: 1)
    }
    if !self.comment.isEmpty {
      try visitor.visitSingularStringField(value: self.comment, fieldNumber: 2)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Soseedy_Comment) -> Bool {
    if self.authorName != other.authorName {return false}
    if self.comment != other.comment {return false}
    if self.attachments != other.attachments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
